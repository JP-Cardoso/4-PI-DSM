openapi: "3.0.2"
info:
  title: API-Warehouse of Ideas
  version: "1.0"
  description:
  API for capturing and transforming temperature data using embedded systems.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: https://api.server.test/v1
paths:
  /user:
    post:
      tags:
        - User
      summary: Create a new user
      requestBody:
        description: Create a new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
  /user/{id}:
    get:
      tags:
        - User
      summary: Retrieve a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
    patch:
      tags:
        - User
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Update user information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
    delete:
      tags:
        - User
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found

  /auth/user:
    post:
      tags: 
        - User
      summary: Authentication at user
      requestBody:
        description: Authentication at user
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200": 
          description: Successfully generated authentication token
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/AuthRsponse"
          
  /iot:
    post:
      tags:
        - "IoT"
      summary: Insert data via IoT
      requestBody:
        description: Insert data via IoT
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/IoTRequest"
      responses:
        "201":
          description: Data inserted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IoTResponse"
    get:
      tags: 
        - "IoT"    
      summary: Retrieve data from MQTT broker
      responses:
        "200":
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IoTResponse"
  /report-analitic:
    get:
      tags: 
       - "Reports"
      summary: Analysis report
      responses:
       "200":
          description: Retuns of analyzed data
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ReportAnaliticResponse" 
  /reports:
    get:
      tags: 
        - "Reports"
      summary: Analysis report
      responses:
        "200":
          description: Returns os analyzed data
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/ReportsResponse"
  
components:
  schemas:
    UserRequest:
      type: object
      properties:
        name:
          type: string
          example: Lucas
        cpf:
          type: string
          example: "19011691032"
        password:
          type: string
          format: password
       
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Lucas
        cpf:
          type: string
          example: "19011691032"
        password:
          type: string
          format: password
      
    AuthRequest:
     type: object
     properties:
        cpf:
          type: string
          example: "30180901010"
        password:
          type: string
          example: "123456789"             
    AuthResponse:
      type: object
      properties:
        cpf:
          type: string
          example: "30180901010"
        password:
          type: string
          example: "123456789"  
        token:
          type: string
    IoTRequest:
      type: object
      properties:
        temperature: 
         type: number
         example: 24.60
        moisture:
          type: number
          example: 52.00
        dateInsert:
          type: string
          format: date-time
          example: "2023-05-01T14:15:20Z"
        idInsert:
          type: number
          example: 1
    IoTResponse:
      type: object
      properties:
        temperature: 
         type: number
         example: 24.60
        moisture:
          type: number
          example: 52.00
        dateInsert:
          type: string
          format: date-time
          example: "2023-05-01T14:15:20Z"
        idInsert:
          type: number
          example: 1
    ReportAnaliticResponse:
      type: array
      items:
        type: object
        properties:
          temperatura:
            type: object
            properties:
              media:
                type: number
                format: double
                example: 22.50
              desvioPadraoAmostra:
                type: number
                fomat: double
                example: 1.50
          umidade:
            type: object
            properties:
              media:
                type: number
                format: double
                example: 50.54
              desvioPadraoAmostra:
                type: number
                fomat: double
                example: 1.50
    ReportsResponse:
      type: array
      items:
        type: object
        properties:
          dataInsert:
            type: string
            format: date-time
            example: "2023-05-01T14:15:20Z"
          temperature:
            type: string
            example: "25"
          mouistre:
            type: string
            example: "50"

